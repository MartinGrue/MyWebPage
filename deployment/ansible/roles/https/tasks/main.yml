---
- name: Remove /etc/letsencrypt if exists
  file:
    path: "/etc/letsencrypt"
    state: absent

- name: Create required directories in /etc/letsencrypt
  file:
    path: "/etc/letsencrypt/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  with_items:
    - account
    - certs
    - csrs
    - keys

- name: "Create .well-known/acme-challenge directory"
  file:
    path: /usr/share/nginx/html/.well-known/acme-challenge
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: Create acme-challenge build directory
  file:
    path: "/home/build"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x

- name: copy acme-challenge docker files
  copy:
    src: "{{role_path}}/files/{{item}}"
    dest: /home/build/{{item}}
    mode: 0777
  with_items:
    - Dockerfile
    - nginx.conf

- name: Build the nginx-acme-challenge docker image
  community.docker.docker_image:
    build:
      path: /home/build
    name: nginx-acme-challenge
    source: build

- name: Remove nginx-acme-challenge container
  community.docker.docker_container:
    name: nginx-acme-challenge
    state: absent

- name: Create a nginx-acme-challenge container
  docker_container:
    name: nginx-acme-challenge
    image: nginx-acme-challenge
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /usr/share/nginx/html/.well-known:/usr/share/nginx/html/.well-known
    ports:
      - "80:80"

- name: "Generate a Let's Encrypt account key"
  shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"

- name: "Generate Let's Encrypt private key"
  shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt/keys/{{ domain_name }}.key"

- name: "Generate Let's Encrypt CSR"
  shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}\")) | tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
  args:
    executable: /bin/bash

- name: copy Let's Encrypt CSR generation script
  copy:
    src: CSRgeneration.sh
    dest: /home/compose/
    mode: 0777

- name: run Let's Encrypt CSR generation script
  shell: /home/compose/CSRgeneration.sh {{domain_name}} {{sub_domain_names|join(' ')}}
  args:
    executable: /bin/bash
  register: CSR_data

- name: Prints CSR_data
  ansible.builtin.debug:
    msg:
      - "{{ CSR_data.stdout }}"

- name: "Begin Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    terms_agreed: 1
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
    remaining_days: 1
  register: acme_challenge_your_domain

- name: "save acme_challenge_your_domain"
  copy:
    content: "{{ acme_challenge_your_domain }}"
    dest: "/etc/letsencrypt/acme_challenge.txt"

- name: "Implement http-01 challenge files"
  copy:
    content: "{{ item['value']['http-01']['resource_value'] }}"
    dest: "/usr/share/nginx/html/{{ item['value']['http-01']['resource'] }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_dict: "{{ acme_challenge_your_domain['challenge_data'] }}"

- name: "Complete Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
    data: "{{ acme_challenge_your_domain }}"
  register: acme_completed
  until: acme_completed is not failed

- name: Remove nginx-acme-challenge container
  community.docker.docker_container:
    name: nginx-acme-challenge
    state: absent