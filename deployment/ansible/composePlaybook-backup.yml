---
- name: Run with inline v2 compose
  hosts: all
  vars:
    provided_cers: false
    ansible_python_interpreter: "/usr/bin/python3"
    letsencrypt_account_key: /etc/letsencrypt/account/account.key
    domain_name: gruema.de
    sub_domain_names:
      - www
      - react
    acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
    # acme_directory: https://acme-v02.api.letsencrypt.org/directory
    acme_version: 2
    acme_email: grruebler.martin@outlook.de
    acme_challenge_type: http-01
    letsencrypt_keys_dir: /etc/letsencrypt/keys
    letsencrypt_csrs_dir: /etc/letsencrypt/csrs
    letsencrypt_certs_dir: /etc/letsencrypt/certs
  # roles:
  #   - name: ansible-doctl
  #     doctl_source_version: 1.59.0
  tasks:
    - name: System preparation
      block:
        - name: Ensure Docker compose files exists
          copy: src="../compose/docker-compose.yml" dest="/home/compose/"

        # - name: Install necessary pip modules
        #   shell: pip3 install docker docker-compose

        - name: Tear down existing docker services
          community.docker.docker_compose:
            project_src: /home/compose
            state: absent

    #     - name: remove remove golang-docker-credential-helpers, to make doctl work
    #       apt:
    #         name: golang-docker-credential-helpers
    #         state: absent

    #     - name: make sure, the digitalocean container registry can be accessed
    #       shell: doctl registry login --access-token {{token}}

    #     - name: Install necessary pip modules
    #       shell: pip3 install docker docker-compose

    #     - name: Prepare folder structure for nginx config
    #       file:
    #         path: /home/compose/reverseproxy/letsencrypt
    #         state: directory

        - name: Prepare folder structure for activity nginx config
          file:
            path: /home/compose/reverseproxy/activity
            state: directory

        - name: Delete /etc/letsencrypt
          file:
            state: absent
            path: /etc/letsencrypt

    - name: Letsencrypt config files provided
      block:
        - name: Copy provided letsencrypt folder
          copy:
            src: "../compose/reverseproxy/letsencrypt_backup_offical/"
            dest: "/etc/letsencrypt"
            owner: "root"

        - name: "Copy nginx ssl config"
          copy: src="../compose/reverseproxy/{{ item }}" dest="/home/compose/reverseproxy/nginx.conf"
          with_items:
            - nginx_ssl.conf

        - name: "Copy nginx activity frontend config"
          copy: src="../compose/reverseproxy/activity/{{ item }}" dest="/home/compose/reverseproxy/activity/{{ item }}"
          with_items:
            - activity_frontend.conf

        - name: start nginx
          community.docker.docker_compose:
            project_src: /home/compose
            debug: true

      when: provided_cers
    - name: NO Letsencrypt config files provided
      block:
        - name: "Copy no ssl nginx config"
          copy: src="../compose/reverseproxy/{{ item }}" dest="/home/compose/reverseproxy/nginx.conf"
          with_items:
            - nginx.conf

        - name: start nginx
          community.docker.docker_compose:
            project_src: /home/compose
            debug: true

        - name: Create required directories in /etc/letsencrypt
          file:
            path: "/etc/letsencrypt/{{ item }}"
            state: directory
            owner: root
            group: root
            mode: u=rwx,g=x,o=x
          with_items:
            - account
            - certs
            - csrs
            - keys

        - name: "Generate a Let's Encrypt account key"
          shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"

        - name: "Generate Let's Encrypt private key"
          shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt/keys/{{ domain_name }}.key"

        - name: "Generate Let's Encrypt CSR"
          shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}\")) | tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
          args:
            executable: /bin/bash
        - name: copy Let's Encrypt CSR generation script
          copy: src=CSRgeneration.sh dest=/home/compose/ mode=0777
        - name: run Let's Encrypt CSR generation script
          shell: /home/compose/CSRgeneration.sh {{domain_name}} {{sub_domain_names|join(' ')}}
          args:
            executable: /bin/bash
          register: CSR_data
        - debug: msg="{{ CSR_data.stdout }}"     
        - name: "Begin Let's Encrypt challenges"
          community.crypto.acme_certificate:
            acme_directory: "{{ acme_directory }}"
            acme_version: "{{ acme_version }}"
            account_key_src: "{{ letsencrypt_account_key }}"
            account_email: "{{ acme_email }}"
            terms_agreed: 1
            challenge: "{{ acme_challenge_type }}"
            csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
            dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
            fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
            remaining_days: 1
          register: acme_challenge_your_domain

        - name: "save acme_challenge_your_domain"
          copy: content={{ acme_challenge_your_domain }} dest="/etc/letsencrypt/acme_challenge.txt"

        - name: "Create .well-known/acme-challenge directory"
          file:
            path: /usr/share/nginx/html/.well-known/acme-challenge
            state: directory
            owner: root
            group: root
            mode: u=rwx,g=rx,o=rx

        - name: "Implement http-01 challenge files"
          copy:
            content: "{{ item['value']['http-01']['resource_value'] }}"
            dest: "/usr/share/nginx/html/{{ item['value']['http-01']['resource'] }}"
            owner: root
            group: root
            mode: u=rw,g=r,o=r
          with_dict: "{{ acme_challenge_your_domain['challenge_data'] }}"

        - name: "Complete Let's Encrypt challenges"
          when: acme_challenge_your_domain is defined
          community.crypto.acme_certificate:
            acme_directory: "{{ acme_directory }}"
            acme_version: "{{ acme_version }}"
            account_key_src: "{{ letsencrypt_account_key }}"
            account_email: "{{ acme_email }}"
            challenge: "{{ acme_challenge_type }}"
            csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
            dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
            chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
            fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
            data: "{{ acme_challenge_your_domain }}"

        # - name: "Copy nginx ssl config"
        #   copy: src="../compose/reverseproxy/{{ item }}" dest="/home/compose/reverseproxy/nginx.conf"
        #   with_items:
        #     - nginx_ssl.conf

        # - name: Restart nginx with with https config
        #   community.docker.docker_compose:
        #     project_src: /home/compose

        # - name: Ensure reverse Proxy config file exists
        #   copy: src="../compose/reverseproxy/nginx.conf" dest="/home/compose/reverseproxy/nginx.conf"

        # - name: Ensure reverse Proxy letsencrypt live exists
        #   copy: src="../compose/reverseproxy/letsencrypt/live" dest="/home/compose/reverseproxy/letsencrypt"

        # - name: Ensure Letsencrypt options-ssl-nginx.conf files exists
        #   copy: src="../compose/reverseproxy/letsencrypt/options-ssl-nginx.conf" dest="/home/compose/reverseproxy/letsencrypt/options-ssl-nginx.conf"

        # - name: Ensure Letsencrypt ssl-dhparams.pem files exists
        #   copy: src="../compose/reverseproxy/letsencrypt/ssl-dhparams.pem" dest="/home/compose/reverseproxy/letsencrypt/ssl-dhparams.pem"

        # - name: remove remove golang-docker-credential-helpers, to make doctl work
        #   apt:
        #     name: golang-docker-credential-helpers
        #     state: absent
        # - name: make sure, the digitalocean container registry can be accessed
        #   shell: doctl registry login --access-token {{token}}
        # - name: Install necessary pip modules
        #   shell: pip3 install docker docker-compose

        # - name: Remove old image
        #   community.docker.docker_compose:
        #     debug: true
        #     remove_images: all
        #     project_src: /home/nginx
        #     pull: true
      when: not provided_cers
